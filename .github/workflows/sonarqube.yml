name: CI/CD workflow for Laravel Build, Sonar Code Scan, and Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Descargar el código fuente
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Configurar PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      # 3. Configurar Java 17 (requerido por SonarQube)
      - name: Set up Java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      # 4. Instalar dependencias de Composer para Laravel
      - name: Install Composer dependencies
        run: composer install --no-scripts --no-interaction

      # 5. Instalar JQ (herramienta para procesar JSON en Bash)
      - name: Install jq
        run: sudo apt-get install -y jq

      # 6. Instalar SonarScanner
      - name: Install SonarScanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.0.2966-linux.zip
          unzip sonar-scanner-cli-5.0.0.2966-linux.zip
          mv sonar-scanner-5.0.0.2966-linux sonar-scanner
          echo "$(pwd)/sonar-scanner/bin" >> $GITHUB_PATH

      # 7. Ejecutar el análisis de SonarQube y excluir archivos JS, TS, y CSS
      - name: Run SonarQube Scan with JS, TS, and CSS Exclusions
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          ./sonar-scanner/bin/sonar-scanner \
            -Dsonar.organization=my-org \
            -Dsonar.projectKey=my-laravel-app \
            -Dsonar.sources=. \
            -Dsonar.exclusions=*/.js,*/.ts,*/.css \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      # 8. Verificar el estado de la Quality Gate
      - name: Quality Gate Status
        id: sonar_quality_gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          for i in {1..15}; do
            response=$(curl -s -u $SONAR_TOKEN: $SONAR_HOST_URL/api/qualitygates/project_status?projectKey=my-laravel-app)
            echo "Response from SonarQube API: $response"
            status=$(echo $response | jq -r '.projectStatus.status')

            if [ "$status" == "OK" ]; then
              echo "Quality Gate passed"
              echo "status=passed" >> $GITHUB_ENV
              break
            elif [ "$status" == "ERROR" ]; then
              echo "Quality Gate failed"
              echo "status=failed" >> $GITHUB_ENV
              break
            else
              echo "Waiting for SonarQube analysis to complete..."
              sleep 10
            fi
          done

      # 9. Realizar despliegue en DigitalOcean si pasa la Quality Gate
      - name: Deploy to DigitalOcean
        if: env.status == 'passed'
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          REMOTE_USER: 'root'
          REMOTE_HOST: '24.199.121.150'
          REMOTE_PATH: '/var/www/api_appointments'
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $REMOTE_USER@$REMOTE_HOST "cd $REMOTE_PATH && git reset --hard HEAD && git pull origin main && php artisan migrate --force"

      # 10. Mensaje de confirmación del despliegue
      - name: Confirm Deployment
        if: env.status == 'passed'
        run: echo "Deployment to DigitalOcean completed successfully."

      # 11. Enviar notificación por correo si el despliegue fue exitoso
      - name: Send Success Email
        if: env.status == 'passed'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Despliegue Exitoso"
          body: "El despliegue a DigitalOcean se completó correctamente."
          to: "nolberto.sumaran@gmail.com"
          from: "nolberto.sumaran@gmail.com"

      # 12. Enviar notificación por correo si la Quality Gate falló
      - name: Send Quality Gate Failure Email
        if: env.status == 'failed'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Despliegue Fallido - Quality Gate no aprobada"
          body: "El despliegue no se realizó porque la Quality Gate de SonarQube no fue aprobada. Revise el análisis en SonarQube para más detalles."
          to: "nolberto.sumaran@gmail.com"
          from: "nolberto.sumaran@gmail.
